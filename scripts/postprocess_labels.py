#!/usr/bin/env python
# coding=utf-8
# Copyright 2024  Bofeng Huang

import os
import re

import fire
import numpy as np
from datasets import load_dataset

""""Postprocess and filter ICD-10 labels generated by LLM."""

pattern = re.compile(r"#{2,3} (?:Analysis and Code Assignment|Analysis|Result)", flags=re.I)


def main(
    input_file: str,
    output_file: str,
    context_file: str,
    max_labels: int = 20,
    num_processing_workers: int = 16,
):
    # load dataset
    dataset = load_dataset("json", data_files=input_file, split="train")
    print(f"Loaded {dataset.num_rows:,d} examples from {input_file}")

    # pre-defined codes
    context_ds = load_dataset("json", data_files=context_file, split="train")
    validated_codes = set(context_ds["code"])
    print(f"Loaded {len(validated_codes)} pre-defined codes")

    # parse generation output
    def process_function(example):
        s = example["output"]
        s = re.sub(r"^```|```$", "", s)
        splits = pattern.split(s)[1:]
        splits = [s.strip() for s in splits]
        assert len(splits) == 2, s

        """
        if len(splits) != 2:
            # example["labels"] = []
            example["labels_eval"] = []
            return example
        """

        labels = re.split(r",\s*", splits[1])
        labels = [l for l in labels if l not in {"0", ""}]
        example["labels"] = labels

        return example

    processed_dataset = dataset.map(
        process_function,
        remove_columns={"output", "raw_text", "gen_configs"} & set(dataset.column_names),
        num_proc=num_processing_workers,
    )

    # filter examples by labels
    def filter_function(example):
        labels = example["labels"]
        # if exist non-defined labels
        if not all(c in validated_codes for c in labels):
            return False
        # if #labels exceeds threshold
        if len(labels) > max_labels:
            return False
        return True

    filtered_dataset = processed_dataset.filter(filter_function, num_proc=num_processing_workers)
    print(f"Filtered to {filtered_dataset.num_rows:,d} examples")

    # stat
    dataset_df = filtered_dataset.to_pandas()
    # dataset_df["num_labels"] = dataset_df["labels"].map(lambda x: len(x))
    all_labels = np.concatenate(dataset_df["labels"].to_list())
    unique, counts = np.unique(all_labels, return_counts=True)
    count_sort_indices = np.argsort(-counts)
    unique, counts = unique[count_sort_indices], counts[count_sort_indices]
    print(f"Num of unique labels: {len(unique)}")
    print("Top 5 most frequent labels")
    for i in range(5):
        print(f"{unique[i]:10}: {counts[i]}")

    # export
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    filtered_dataset.to_json(output_file, orient="records", lines=True, force_ascii=False)
    print(f"The processed data is saved into {output_file}")


if __name__ == "__main__":
    fire.Fire(main)
